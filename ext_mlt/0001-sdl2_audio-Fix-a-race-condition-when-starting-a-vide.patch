From 7908008bc83a11f0641a849572c6e06aadb050ba Mon Sep 17 00:00:00 2001
From: Dmitry Kazakov <dimula73@gmail.com>
Date: Sun, 21 Jul 2024 15:49:16 +0200
Subject: [PATCH] [sdl2_audio] Fix a race condition when starting a video
 thread

Variable `self->playing` is initialized by a background SDL thread that
we start in `consumer_play_audio`. When FPS value is too hight (e.g. 100fps)
or when the system is too slow, `self->playing` may be initialized **after**
the actual check is done. It will end-up in a deadlock in `consumer_thread`
because video_thread will never be started and noone will ever consume
the frames from the queue.

The patch just starts the video thread unconditionally, making sure the
frame will always be consumed.

See: https://bugs.kde.org/show_bug.cgi?id=489146
---
 src/modules/sdl2/consumer_sdl2_audio.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/modules/sdl2/consumer_sdl2_audio.c b/src/modules/sdl2/consumer_sdl2_audio.c
index 41a9e65..e87963d 100644
--- a/src/modules/sdl2/consumer_sdl2_audio.c
+++ b/src/modules/sdl2/consumer_sdl2_audio.c
@@ -473,8 +473,12 @@ static void *video_thread(void *arg)
         }
         pthread_mutex_unlock(&self->video_mutex);
 
-        if (!self->running || next == NULL)
+        if (!self->running || next == NULL) {
+            if (self->running) {
+                mlt_log_warning(MLT_CONSUMER_SERVICE(&self->parent), "video thread got a null frame even though the consumer is still running!\n");
+            }
             break;
+        }
 
         // Get the properties
         properties = MLT_FRAME_PROPERTIES(next);
@@ -593,8 +597,10 @@ static void *consumer_thread(void *arg)
             // Play audio
             init_audio = consumer_play_audio(self, frame, init_audio, &duration);
 
-            // Determine the start time now
-            if (self->playing && init_video) {
+            // Start the video thread unconditionally. We cannot check for self->playing,
+            // because the variable may be initialized with a delay by a backdround SDL
+            // thread and cause race condition
+            if (init_video) {
                 // Create the video thread
                 pthread_create(&thread, NULL, video_thread, self);
 
-- 
2.23.0.windows.1

